{% extends 'base.html.twig' %}

{% block title %}
  Broker Config Management
{% endblock %}

{% block body %}
  <div class="container mt-4">
    <h1>
      Broker Configurations
    </h1>

    <a href="{{ path('broker_config_create', {'format': 'admin'}) }}" class="btn btn-success mb-3">
      Add New Broker Config
    </a>

    {% include 'partials/_flash-messages.html.twig' %}

    <table class="table table-striped">
      <thead>
        <tr>
          <th>
            Broker
          </th>
          <th>
            File Name
          </th>
          <th>
            Config
          </th>
          <th>
            Actions
          </th>
        </tr>
      </thead>
      <tbody>
        {% for broker in brokers %}
          <tr>
            <td width="15%">
              {{ broker.name }}
            </td>
            <td width="20%">
              {{ broker.config.fileName }}
            </td>
            <td>
              {{ broker.config.FileMapping | json_encode(constant('JSON_PRETTY_PRINT')) }}
            </td>
            <td width="20%">
              <a href="{{ path('broker_config_edit', {'uuid': broker.uuid, 'format': 'admin'}) }}" class="btn btn-primary btn-sm">
                Edit
              </a>

              <!-- CSV Upload Form -->
              <form class="upload-form d-inline" action="{{ path('broker_upload_csv', {uuid: broker.uuid, 'format': 'admin'}) }}" method="POST" enctype="multipart/form-data">
                <input type="file" name="csv_file" accept=".csv" required class="form-control d-inline-block w-auto">
                  <button type="submit" class="btn btn-primary btn-sm">
                    Upload CSV
                  </button>
                </form>

                <div class="upload-messages"></div>

                <!-- Clear Broker Data Buttons -->
                <a href="#" class="btn btn-danger btn-sm clear-policies-btn" data-url="{{ path('api_clear_broker_policy_data', {'uuid': broker.uuid, 'format': 'admin'}) }}">
                  Clear Policies Data
                </a>

                <a href="#" class="btn btn-danger btn-sm clear-all-btn" data-url="{{ path('api_clear_all_broker_data', {'uuid': broker.uuid, 'format': 'admin'}) }}">
                  Clear All Data
                </a>

                <!-- Delete Broker Button -->
                <button class="btn btn-danger btn-sm delete-broker-btn" data-url="{{ path('broker_config_delete', {'uuid': broker.uuid, 'format': 'admin'}) }}">
                  Delete Broker
                </button>
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>

    <script>
    document.addEventListener("DOMContentLoaded", function() {
      // Handle Clear Policies and Clear All Data
      document.querySelectorAll('.clear-policies-btn, .clear-all-btn').forEach(button => {
        button.addEventListener('click', function(event) {
          event.preventDefault();
          let confirmationMessage = this.classList.contains('clear-all-btn') 
            ? "Are you sure you want to delete ALL broker data?" 
            : "Are you sure you want to clear policies?";
          
          if (confirm(confirmationMessage)) {
            fetch(this.dataset.url, { method: 'DELETE' })
              .then(response => response.json())
              .then(data => {
                if (data.redirect) {
                  window.location.href = data.redirect; // Redirect for flash messages
                }
              })
              .catch(error => console.error('Error:', error));
          }
        });
      });

      // Handle CSV Upload per Form
      document.querySelectorAll('.upload-form').forEach(form => {
        form.addEventListener('submit', function(event) {
          event.preventDefault();
          let formData = new FormData(this);
          let messagesDiv = this.nextElementSibling; // Get the related message div

          fetch(this.action, { method: 'POST', body: formData })
            .then(response => response.json())
            .then(data => {
              messagesDiv.innerHTML = ''; // Clear previous messages
              let message = document.createElement('div');
              message.className = data.status;
              message.innerText = data.message;
              messagesDiv.appendChild(message);

              if (data.redirect) {
                window.location.href = data.redirect;
              }
            })
            .catch(error => console.error('Error:', error));
        });
      });

      // Handle Delete Broker
      document.querySelectorAll('.delete-broker-btn').forEach(button => {
        button.addEventListener('click', function(event) {
          event.preventDefault();
          if (confirm("Are you sure you want to delete this broker?")) {
            fetch(this.dataset.url, { method: 'POST' }) // Ensure backend responds with JSON
              .then(response => response.json())
              .then(data => {
                if (data.redirect) {
                  window.location.href = data.redirect; // Redirect after delete
                }
              })
              .catch(error => console.error('Error:', error));
          }
        });
      });
    });
  </script>

  {% endblock %}
  